name: Create and publish a Docker image with Params

on: 
  workflow_dispatch:
    inputs:
      destEnvToDeploy:
        description: 'Environnement to Deploy'     
        required: true
        default: 'playtest'
        type: choice
        options:
          - playtest
          - PROD
      branchToDeploy:
        description: 'Branch to Deploy'     
        required: true
        default: 'playtest'
        type: choice
        options:
          - main
          - playtest
          - PROD
      push_img_to_github:
        description: 'Push also to Github Container Registry ?'
        required: true
        default: false
        type: boolean
  

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  GITHUB_REGISTRY: ghcr.io
  SCALEWAY_REGISTRY: rg.fr-par.scw.cloud/phoenix-registry
  IMAGE_NAME: ${{ github.repository }}
  SUFFIX: ${{ inputs.destEnvToDeploy }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image-with-params:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Checkout all the repositories (depends on the inputs)
      - name: Checkout Phoenix-Bot
        uses: actions/checkout@v4
        with:
          repository: Phoenix-RP-RedM/Phoenix-Bot
          ref: ${{ inputs.branchToDeploy }}
          path: Phoenix/Phoenix-Bot
          token: ${{ secrets.PHOENIX_BUILD_IMG }}


      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Github Container registry
        if: ${{ inputs.push_img_to_github }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to the Scaleway Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.SCALEWAY_REGISTRY }}
          username: ${{ secrets.SCALEWAY_USERNAME }}
          password: ${{ secrets.SCALEWAY_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker (Save only on Scaleway Registry)
        if: ${{ ! inputs.push_img_to_github }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.SCALEWAY_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.SUFFIX }}
      - name: Extract metadata (tags, labels) for Docker (Save on Scaleway & Github Registry)
        if: ${{ inputs.push_img_to_github }}
        id: metaAll
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GITHUB_REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.SCALEWAY_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.SUFFIX }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags || steps.metaAll.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels || steps.metaAll.outputs.labels }}
          target: BASE
